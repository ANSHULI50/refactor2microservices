############################################################################
# Copyright 2020 Anurag Yadav (anurag.yadav@newtechways.com)               #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License");          #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#     http:#www.apache.org/licenses/LICENSE-2.0                            #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

version: '3.5'

networks:
  mynet1:
    name: mynet1


services:

  elasticsearch:
    image: elasticsearch:7.13.2
    container_name: elasticsearch-1
    hostname: elasticsearch-1
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    expose:
      - "9200"
    ports:
      - "9200:9200"
    networks:
      - mynet1
    volumes:
      - ./data/elasticsearch-1:/usr/share/elasticsearch/data
    restart: unless-stopped

  kibana:
    image: kibana:7.13.2
    container_name: kibana-1
    hostname: kibana-1
    ports:
      - "5601:5601"
    networks:
      - mynet1
    environment:
      - ELASTICSEARCH_HOSTS="http://elasticsearch-1:9200"
    restart: unless-stopped
      

  fluentd:
    build:
      context: ./fluentd
      dockerfile: Dockerfile
    image: ntw/fluentd
    container_name: fluentd-1
    hostname: fluentd-1
    networks:
      - mynet1
    ports:
      - "24224:24224"
    volumes:
      - ./logs/fluentd-1:/fluentd/log
#    expose:
#    - 24224
#    - 24224/udp
    depends_on:
    - "elasticsearch"
    restart: unless-stopped


  jaeger-agent:
    image: jaegertracing/jaeger-agent
    container_name: jaeger-agent-1
    hostname: jaegar-agent-1
    networks:
      - mynet1
    ports:
      - "6831:6831/udp"
      - "14271:14271"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: ["--reporter.grpc.host-port=jaeger-collector-1:14250"]
    restart: unless-stopped

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    container_name: jaeger-collector-1
    hostname: jaegar-collector-1
    networks:
      - mynet1
    ports:
      - "14250:14250"
      - "14269:14269"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
#      - ES_SERVER_URLS="elasticsearch-1:9200"
    command: [
      "--es.server-urls=http://elasticsearch-1:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--log-level=error"
    ]
    restart: unless-stopped
    
  jaeger-query:
    image: jaegertracing/jaeger-query
    container_name: jaeger-query-1
    hostname: jaeger-query-1
    networks:
      - mynet1
    ports:
      - "16685:16685"
      - "16686:16686"
      - "16687:16687"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch-1:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    restart: unless-stopped

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    image: ntw/prometheus
    container_name: prometheus-1
    hostname: prometheus-1
    networks:
      - mynet1
    ports:
      - "9090:9090"
    restart: unless-stopped

  es-exporter:
    image: prometheuscommunity/elasticsearch-exporter
    container_name: es-exporter-1
    hostname: es-exporter-1
    networks:
      - mynet1
    ports:
      - "9114:9114"
    command:
      - '--es.uri=http://elasticsearch-1:9200'
    restart: unless-stopped

  pg-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: pg-exporter-1
    hostname: pg-exporter-1
    networks:
      - mynet1
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME="postgresql://postgres:postgres@postgres-1:5432/oms?sslmode=disable"
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana-1
    hostname: grafana-1
    networks:
      - mynet1
    ports:
      - "3000:3000"
    restart: unless-stopped

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    image: ntw/postgres
    container_name: postgres-1
    hostname: postgres-1
    networks:
      - mynet1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./logs/postgres-1:/var/log/postgresql
      - ./data/postgres-1:/var/lib/postgresql/data
    command: postgres -c shared_buffers=128MB -c max_connections=50


  cassandra:
    build:
      context: ./cassandra
      dockerfile: Dockerfile
    image: ntw/cassandra
    container_name: cassandra-1
    hostname: cassandra-1
    networks:
      - mynet1
    ports:
      - "9042:9042"
      - "7070:7070"
    environment:
      - JVM_OPTS=-Xms512M -Xmx1024M
      - SCHEMA_SEED_INSTANCE=cassandra-1
    volumes:
      - ./logs/cassandra-1:/var/log/cassandra
      - ./data/cassandra-1:/var/lib/cassandra
    entrypoint: /docker-entrypoint-second.sh


  eureka:
    build:
      context: ./eureka
      dockerfile: Dockerfile
    image: ntw/eureka
    container_name: eureka-1
    hostname: eureka-1
    networks:
      - mynet1
    ports:
      - "8761:8761"
    env_file: .env
    environment:
      - JAVA_OPTIONS=-Xmx512M
      - server.port=8761
      - eureka.client.registerWithEureka=false
      - eureka.client.fetchRegistry=false
    volumes:
      - ./logs/eureka-1:/usr/local/tomcat/logs


  lb-web:
    build:
      context: ./lb-web
      dockerfile: Dockerfile
    image: ntw/lb-web
    container_name: lb-web
    networks:
      - mynet1
    ports:
      - "80:80"
      - "443:443"
    environment:
      - SERVER_HOSTS=web-1
      - SERVER_PORT=8000
      - USE_SSL=false
    volumes:
      - ./logs/lb-web:/var/log/oms


  lb-services:
    build:
      context: ./lb-services
      dockerfile: Dockerfile
    image: ntw/lb-services
    container_name: lb-services
    networks:
      - mynet1
    ports:
      - "81:80"
    environment:
      - SERVER_HOSTS=gateway-svc-1
      - SERVER_PORT=8080
    volumes:
      - ./logs/lb-services:/var/log/oms


  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    image: ntw/web
    container_name: web-1
    hostname: web-1
    networks:
      - mynet1
    ports:
      - "8000:8000"
    env_file: .env
    volumes:
      - ./logs/web-1:/var/log/oms
    command: python3 manage.py runserver 0.0.0.0:8000
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: web-1


  services:
    build:
      context: ./services
      dockerfile: Dockerfile
    image: ntw/services
    container_name: services-build


  gateway-svc:
    image: ntw/services
    container_name: gateway-svc-1
    hostname: gateway-svc-1
    networks:
      - mynet1
    ports:
      - "8080:8080"
      - "6000:6005"
    env_file: .env
    environment:
      - eureka.instance.hostname=gateway-svc-1
      - server.threadPool.threads.maximum=20
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh gateway
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: gateway-svc-1

  admin-svc:
    image: ntw/services
    container_name: admin-svc-1
    hostname: admin-svc-1
    networks:
      - mynet1
    ports:
      - "8081:8080"
      - "6001:6005"
    env_file: .env 
    environment:
      - eureka.instance.hostname=admin-svc-1
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh admin
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: admin-svc-1

  auth-svc:
    image: ntw/services
    container_name: auth-svc-1
    hostname: auth-svc-1
    networks:
      - mynet1
    ports:
      - "8082:8080"
      - "6002:6005"
    env_file: .env 
    environment:
      - eureka.instance.hostname=auth-svc-1
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh auth
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: auth-svc-1

  product-svc:
    image: ntw/services
    container_name: product-svc-1
    hostname: product-svc-1
    networks:
      - mynet1
    ports:
      - "8083:8080"
      - "6003:6005"
    env_file: .env 
    environment:
      - eureka.instance.hostname=product-svc-1
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh product
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: product-svc-1

  order-svc:
    image: ntw/services
    container_name: order-svc-1
    hostname: order-svc-1
    networks:
      - mynet1
    ports:
      - "8084:8080"
      - "6004:6005"
    env_file: .env 
    environment:
      - eureka.instance.hostname=order-svc-1
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh order
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: order-svc-1

  inventory-svc:
    image: ntw/services
    container_name: inventory-svc-1
    hostname: inventory-svc-1
    networks:
      - mynet1
    ports:
      - "8085:8080"
      - "6005:6005"
    env_file: .env 
    environment:
      - eureka.instance.hostname=inventory-svc-1
    volumes:
      - ./logs/services-1:/var/log/oms
    entrypoint: /usr/bin/docker-entrypoint.sh inventory
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: inventory-svc-1
